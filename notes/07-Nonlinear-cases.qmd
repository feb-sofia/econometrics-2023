# Departures from linearity

```{r}
library(tidyverse)
library(readxl)
```

## Interactions

### A binary and a continuous predictor

```{r}
gdp <- read_excel("../data/imf-dm-export-gdp-pcap.xls") %>% 
  pivot_longer(cols = -country, values_to = "gdppc", names_to = "year")

gov <- read_excel("../data/imf-dm-export-spending.xls") %>% 
  mutate(
    across(-country, as.character)
  ) %>%
  pivot_longer(cols = -country, values_to = "spending", names_to = "year")

gdpgov <- gdp %>%
  left_join(gov, by = c("country", "year")) %>%
  mutate(
    year = as.integer(year),
    spending = as.numeric(spending),
    gdppc = as.numeric(gdppc)
  ) %>%
  filter(
    !(country %in% c(
      "Advanced economies",
      "Africa (Region)",
      "ASEAN-5",
      "Asia and Pacific",
      "Australia and New Zealand",
      "Central America",
      "Central Asia and the Caucasus",
      "Emerging and Developing Asia",          
      "Emerging and Developing Europe",           
      "Emerging market and developing economies",
      "Ethiopia",
      "Euro area",                               
      "Europe",                               
      "European Union", 
      "Latin America and the Caribbean",
      "Major advanced economies (G7)",
      "Middle East (Region)",
      "Middle East and Central Asia",
      "North America",
      "Other advanced economies",
      "Pacific Islands",
      "South Africa",
      "South America",
      "South Asia",
      "South Sudan, Republic of",
      "Southeast Asia",
      "Sub-Saharan Africa (Region)",
      "Western Europe",
      "Western Hemisphere (Region)",
      "World"
    ))
  )
gdpgov2019 <- gdpgov %>% filter(year == 2019)
# write_csv(gdpgov2019, file = "../data/gdpgov2019.csv")
# gdpgov2019 <- read_csv("https://raw.githubusercontent.com/feb-sofia/econometrics-2023/main/data/gdpgov2019.csv")
cntry_codes <- read_csv(
  "https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv"
  ) %>%
  rename(
    iso2 = `alpha-2`,
    iso3 = `alpha-3`
  )

cntry_names_map <- list(
  "Bahamas, The" = "Bahamas",
  "Bolivia" = "Bolivia (Plurinational State of)",
  "China, People's Republic of" = "China",
  "Congo, Dem. Rep. of the" = "Congo, Democratic Republic of the",
  "Congo, Republic of" = "Congo",
  "Czech Republic" = "Czechia",
  "Gambia, The" = "Gambia",
  "Gambia, The" = "Gambia",
  "Hong Kong SAR" = "Hong Kong",
 "Iran" = "Iran (Islamic Republic of)",
 "Kyrgyz Republic" = "Kyrgyzstan",
 "Lao P.D.R." = "Lao People's Democratic Republic",
 "Macao SAR" = "Macao",
 "Micronesia, Fed. States of" = "Micronesia (Federated States of)",
 "Moldova" = "Moldova, Republic of",
 "Slovak Republic" = "Slovakia",
 "Syria" = "Syrian Arab Republic",
 "Tanzania" = "Tanzania, United Republic of",
 "Taiwan Province of China" = "Taiwan, Province of China",
 "TÃ¼rkiye, Republic of" = "Turkey",
 "United Kingdom" = "United Kingdom of Great Britain and Northern Ireland",
 "United States" = "United States of America",
 "Venezuela" = "Venezuela (Bolivarian Republic of)",
 "Vietnam" = "Viet Nam"
)

gdpgov2019 <- gdpgov2019 %>%
  mutate(
    country = recode_factor(as.character(country), !!!cntry_names_map)
  )
```


```{r}
tmp <- gdpgov2019 %>%
  left_join(
    cntry_codes %>% select(name, iso2, iso3),
    by = c("country" = "name")
  )

tax <- read_csv("../data/DP_LIVE_22052023120851767.csv") %>%
  filter(TIME == 2019, FREQUENCY == "A")

tmp1 <- tmp %>%
  left_join(
    tax %>% select(LOCATION, Value),
    by = c("iso3" = "LOCATION")
  )
```


```{r}
gdpgov2019 <- gdpgov %>% filter(year == 2019)
```

```{r}
gdpgov2019 %>%
  ggplot(aes(x = spending, y = gdppc)) + 
  geom_point() +
  geom_smooth(method = "lm")
```

```{r}
gdpgov2019 <- gdpgov2019 %>%
  mutate(
    gdppc_gr = cut(gdppc, breaks = c(0, 1025, 3995, 12375, 30000, Inf), labels = c("Low", "Medium-low", "Medium-high", "High", "Very high"))
  )
```

```{r}
table(gdpgov2019$gdppc_gr)
```

```{r}
median(gdpgov2019$gdppc, na.rm = TRUE)
```

```{r}
gdpgov2019 %>%
  ggplot(aes(x = spending, y = gdppc, color = gdppc_gr)) + 
  geom_point() +
  geom_smooth(method = "lm")
```

```{r}
summary(lm(gdppc ~ 1 + spending, data = gdpgov2019))
```

```{r}
fit2 <- lm(gdppc ~ 1 + spending + gdppc_gr, data = gdpgov2019)
fit3 <- lm(gdppc ~ 1 + spending, data = gdpgov2019)
summary(fit2)
```

```{r}
kids <- read_csv(
  "https://raw.githubusercontent.com/feb-uni-sofia/econometrics2020-solutions/master/data/childiq.csv") %>%
  select(kid_score, mom_hs, mom_iq) %>%
  mutate(
    mom_hs = factor(mom_hs)
  )
```

```{r}
kids_splt <- kids %>%
  ggplot(aes(x = mom_iq, y = kid_score, color = mom_hs)) +
  geom_point()

kids_splt
```

```{r}
lm(kid_score ~ 1 + mom_hs, data = kids)
```

```{r}
lm(mom_iq ~ 1 + mom_hs, data = kids)
```

```{r}
fit1 <- lm(kid_score ~ 1 + mom_hs + mom_iq, data = kids)
summary(fit1)
```

```{r}
kids_splt + 
  geom_abline(intercept = 25.73154, slope = 0.56, color = "firebrick") + 
  geom_abline(intercept = 25.73154 + 5.95012, slope = 0.56, color = "steelblue")
```

```{r}
fit2 <- lm(kid_score ~ 1 + mom_hs * mom_iq, data = kids)
summary(fit2)
```

```{r}
kids_splt + 
  geom_abline(intercept = -11.4820, slope = 0.9689, color = "firebrick") + 
  geom_abline(intercept = -11.4820 + 51.2682 + 5.95012, slope = 0.9689 -0.4843, color = "steelblue")
```

### Two continuous predictors

```{r}
fit <- lm(survived_pct ~ 1 + Sex*Class + Class + Age, data = titanic)
summary(fit)
```

```{r}
tulips <- read_csv("https://raw.githubusercontent.com/feb-sofia/econometrics-2023/main/data/tulips.csv")
```

```{r}
plot(d$water, d$blooms)
```

```{r}
plot(d$shade, d$blooms)
```

```{r}
summary(lm(blooms ~ 1 + water + shade, data = d))
```

```{r}
summary(lm(blooms ~ 1 + water * shade, data = d))
```

## Polynomial regression

```{r}
sim_n <- 100

poly_dt <- tibble(
  x = runif(n = sim_n, min = -4, max = 3),
  y = 2 +  x +  x^2 + rnorm(n = sim_n, mean = 0, sd = 1)
)

poly_plt <- poly_dt %>%
  ggplot(aes(x = x, y = y)) + 
  geom_point()

poly_plt
```

```{r}
fit1 <- lm(y ~ x, data = poly_dt)
summary(fit1)
```

```{r}
poly_plt + 
  geom_smooth(method = "lm")
```

```{r}
poly_dt <- poly_dt %>%
  mutate(
    res1 = residuals(fit1),
    pred1 = predict(fit1)
)
```

## Diagnostic plots

```{r}
poly_dt %>%
  ggplot(aes(x = pred1, y = res1)) + 
  geom_point()
```

```{r}
fit2 <- update(fit1, . ~ . + I(x^2))
summary(fit2)
```

```{r}
?predict.lm
```

```{r}
fit2_pred <- predict(fit2, interval = "confidence") %>%
  as_tibble() %>%
  rename(
    fitted2 = fit,
    upr2 = upr,
    lwr2 = lwr
  )

poly_dt <- poly_dt %>%
  bind_cols(fit2_pred)
```

```{r}
poly_dt %>%
  ggplot(aes(x = x, y = y)) + 
  geom_point() + 
  geom_line(
    aes(y = fitted2),
    color = "steelblue2"
  ) + 
  geom_ribbon(
    aes(ymin = upr2, ymax = lwr2), 
    alpha = 0.2, 
    fill = "steelblue2"
  )
```

```{r}
fit3 <- update(fit2, . ~ . + I(x ^ 3) + I(x ^ 4))
summary(fit3)
```

```{r}
fit3_pred <- predict(fit3, interval = "confidence") %>%
  as_tibble() %>%
  rename(
    fitted3 = fit,
    lwr3 = lwr,
    upr3 = upr
  ) %>%
  mutate(
    res3 = residuals(fit3)
  )

poly_dt <- poly_dt %>%
  bind_cols(fit3_pred)
```

```{r}
fit3
```

```{r}

fitted3_grid <- tibble(
      x = seq(-5, 5, length.out = 300),
    )

tmp <- predict(fit3, newdata = fitted3_grid, interval = "confidence") %>%
  as_tibble() %>%
  bind_cols(fitted3_grid)

ggplot() + 
  geom_point(
    data = poly_dt,
    aes(x = x, y = y)
  ) + 
  geom_line(
    data = tmp,
    aes(x = x, y = fit)) + 
  geom_ribbon(
    data = tmp,
    aes(x = x, ymin = lwr, ymax = upr),
    alpha = 0.2,
    fill = "steelblue2"
    )
```

```{r}
poly_dt %>%
  ggplot(aes(x = fitted3, y = res3)) + 
  geom_point()
```

```{r}
summary(fit1)$r.squared
summary(fit2)$r.squared
summary(fit3)$r.squared
```

```{r}
AIC(fit1)
AIC(fit2)
AIC(fit3)
```

```{r}
?poly
```
